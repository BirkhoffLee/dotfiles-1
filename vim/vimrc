filetype plugin indent on    " required

" The following block sets up vim-plug. Check github for README.
" XXX can be set to whatever path you want your plugins in
call plug#begin('~/.vim/bundle')

" colors
Plug 'jacoborus/tender'

" statusline
Plug 'itchyny/lightline.vim'

" comments
Plug 'tpope/vim-commentary'

" additional file types
Plug 'fatih/vim-nginx'

" Expand region - press v repeatedly
Plug 'terryma/vim-expand-region'

"go packages", lazy loaded for better startup
Plug 'fatih/vim-go', {'for': ['go'], 'do': [':GoInstallBinaries', ':GoUpdateBinaries']}
" better go autocomplete
Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }


Plug 'https://github.com/mattn/gist-vim',                         {'on': ['Gist']} | Plug 'https://github.com/mattn/webapi-vim'
Plug 'https://github.com/jreybert/vimagit',                       {'branch': 'next', 'on': ['Magit', 'MagitOnly']}

Plug 'https://github.com/ehamberg/vim-cute-python',                    { 'for': ['python', 'py']}

Plug 'https://github.com/keith/investigate.vim'

Plug 'https://github.com/mhinz/vim-startify'

Plug 'junegunn/fzf',                                              { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'https://github.com/junegunn/fzf.vim'

" text objects
Plug 'https://github.com/austintaylor/vim-indentobject'
Plug 'https://github.com/wellle/targets.vim'
Plug 'https://github.com/bps/vim-textobj-python',                 { 'for': ['python', 'py']}
Plug 'https://github.com/coderifous/textobj-word-column.vim'
Plug 'https://github.com/kana/vim-textobj-function',              {'for': ['python', 'c', 'java', 'vim']}
Plug 'https://github.com/kana/vim-textobj-user'
Plug 'https://github.com/lucapette/vim-textobj-underscore',       {'for': ['python', 'py', 'sh', 'bash', 'zsh']}
Plug 'https://github.com/b4winckler/vim-angry',                   {'for': ['python', 'py']}
" swap stuff
Plug 'https://github.com/tommcdo/vim-exchange'

" visualize marks, makes them useful
Plug 'https://github.com/kshenoy/vim-signature'

" visualize undo tree
Plug 'https://github.com/simnalamburt/vim-mundo'

Plug 'https://github.com/tpope/vim-repeat'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/Raimondi/delimitMate'
Plug 'https://github.com/tmhedberg/matchit',                      {'for': ['html', 'latex', 'lua', 'shell', 'vim', 'xml', 'sh', 'zsh']}

" use this to close buffers in a more sensible way
Plug 'https://github.com/mhinz/vim-sayonara'

call plug#end()


"" Basics
syntax enable
set encoding=utf-8
set showcmd                     " display incomplete commands
set number                          " enable line numbers
set autoindent                          " set auto-indenting on for programming
set showmatch                   " automatically show matching brackets. works like it does in bbedit.
set visualbell                          " turn on the "visual bell" - which is much quieter than the "audio blink"
set ruler                       " show the cursor position all the time
set backspace=indent,eol,start  " make that backspace key work the way it should
"set background=dark             " Use colours that work well on a dark background (Console is usually black)
"set showmode                    " show the current mode
"set clipboard=unnamed           " set clipboard to unnamed to access the system clipboard under windows


"" Leader
let g:mapleader="\<Space>"

""  leader shortcuts
" :W saves the file with sudo.  must come before the <leader>w remap below
command W w !sudo tee % > /dev/null
" quickly save files
nnoremap <Leader>w :w<CR>

" system clipboard
set clipboard=unnamedplus
map <leader>y "+y

"" Colors
colorscheme tender
"hi Visual guibg=#5f5f5f ctermbg=59            " manual override.
hi Visual term=reverse cterm=reverse guibg=#5f5f5f

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=4 shiftwidth=4      " a tab is two spaces
set expandtab                   " use spaces, not tabs
set backspace=indent,eol,start  " backspace through everything in insert mode
command! KillWhitespace :normal :%s/ *$//g<cr><c-o><cr>

"" Splits
set splitright
set splitbelow

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

""" lightline settings """
" enable tender theme
let g:tender_lightline = 1
" set lightline theme
let g:lightline = {
    \ 'colorscheme': 'tender',
    \ 'component' : {
    \   'readonly': '%{&filetype=="help"?"":&readonly?"-":""}',
    \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
    \ },
    \ 'component_visible_condition': {
    \   'readonly': '(&filetype!="help"&& &readonly)',
    \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))'
    \ },
    \ 'active' : {
    \    'right' : [ [ 'lineinfo' ], [ 'percent' ], [ 'filetype' ] ]
    \ },
  \ }
if !has('gui_running')
  set t_Co=256
endif
set laststatus=2
set noshowmode

" http://www.blaenkdenum.com/posts/a-simpler-vim-statusline/
" mode aware cursors (NOTE: Gui Only)
set guicursor=a:block
set guicursor+=o:hor50-Cursor
set guicursor+=n:Cursor
set guicursor+=i-ci-sm:InsertCursor
set guicursor+=r-cr:ReplaceCursor-hor20
set guicursor+=c:CommandCursor
set guicursor+=v-ve:VisualCursor
set guicursor+=a:blinkon0

hi InsertCursor  ctermfg=15 guifg=#fdf6e3 ctermbg=37  guibg=#2aa198
hi VisualCursor  ctermfg=15 guifg=#fdf6e3 ctermbg=125 guibg=#d33682
hi ReplaceCursor ctermfg=15 guifg=#fdf6e3 ctermbg=65  guibg=#dc322f
hi CommandCursor ctermfg=15 guifg=#fdf6e3 ctermbg=166 guibg=#cb4b16

" line number colors.
"hi CursorLineNr   term=bold ctermfg=Yellow gui=bold guifg=Yellow
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

" Quickly edit vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" golang
let g:go_fmt_command = 'goimports'

augroup myGo
  autocmd FileType go nmap <leader>b <Plug>(go-build)
augroup END

" expand regions (github.com/terryma/vim-expand-region)
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" vp doesn't replace paste buffer
function! RestoreRegister()
    let @" = s:restore_reg
    return ''
endfunction

function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()
